{"version":3,"sources":["components/Cast/Cast.module.css","components/Cast/Cast.jsx"],"names":["module","exports","Cast","movieId","useState","actors","setOneActors","useEffect","APImovie","then","actor","className","s","oneActors","cast","map","oneActors__li","oneActors__img","profile_path","src","alt","name","oneActors__notFoto","oneActors__title","character","popularity","id"],"mappings":"4HACAA,EAAOC,QAAU,CAAC,UAAY,wBAAwB,cAAgB,4BAA4B,eAAiB,6BAA6B,iBAAmB,+BAA+B,mBAAqB,mC,kGC6CxMC,UAtCF,SAAC,GAAiB,IAAD,EAAdC,EAAc,EAAdA,QACd,EAA+BC,mBAAS,IAAxC,mBAAOC,EAAP,KAAeC,EAAf,KAQA,OANAC,qBAAU,WACRC,IAAwBL,GAASM,MAAK,SAACC,GAAD,OACpCJ,EAAa,eAAKI,SAEnB,CAACP,IAGF,qBAAKQ,UAAWC,IAAEC,UAAlB,SACGR,GACC,oCACGA,QADH,IACGA,GADH,UACGA,EAAQS,YADX,aACG,EAAcC,KAAI,SAACL,GAAD,OACjB,qBAAmBC,UAAWC,IAAEI,cAAhC,UACE,qBAAKL,UAAWC,IAAEK,eAAlB,UACQ,OAALP,QAAK,IAALA,OAAA,EAAAA,EAAOQ,cACN,qBACEC,IAAG,gDAAoCT,QAApC,IAAoCA,OAApC,EAAoCA,EAAOQ,cAC9CE,IAAKV,EAAMW,OAGb,mBAAGV,UAAWC,IAAEU,mBAAhB,wEAGJ,sBAAKX,UAAWC,IAAEW,iBAAlB,UACE,6BAAKb,EAAMW,QACL,OAALX,QAAK,IAALA,OAAA,EAAAA,EAAOc,YAAa,4CAAed,EAAMc,UAArB,QACf,OAALd,QAAK,IAALA,OAAA,EAAAA,EAAOe,aAAc,6CAAgBf,EAAMe,mBAdvCf,EAAMgB","file":"static/js/Cast.6c2360d9.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"oneActors\":\"Cast_oneActors__19Znc\",\"oneActors__li\":\"Cast_oneActors__li__2HuTn\",\"oneActors__img\":\"Cast_oneActors__img__14DNB\",\"oneActors__title\":\"Cast_oneActors__title__3OAMQ\",\"oneActors__notFoto\":\"Cast_oneActors__notFoto__EGJO0\"};","/** @format */\n\nimport { useState, useEffect } from \"react\";\nimport s from \"../Cast/Cast.module.css\";\nimport PropTypes from \"prop-types\";\n\nimport * as APImovie from \"../../API/API\";\n\nconst Cast = ({ movieId }) => {\n  const [actors, setOneActors] = useState({});\n\n  useEffect(() => {\n    APImovie.APImovieActors(movieId).then((actor) =>\n      setOneActors({ ...actor })\n    );\n  }, [movieId]);\n\n  return (\n    <div className={s.oneActors}>\n      {actors && (\n        <ul>\n          {actors?.cast?.map((actor) => (\n            <li key={actor.id} className={s.oneActors__li}>\n              <div className={s.oneActors__img}>\n                {actor?.profile_path ? (\n                  <img\n                    src={`https://image.tmdb.org/t/p/w200${actor?.profile_path}`}\n                    alt={actor.name}\n                  />\n                ) : (\n                  <p className={s.oneActors__notFoto}>Нет фото &#128247;</p>\n                )}\n              </div>\n              <div className={s.oneActors__title}>\n                <h4>{actor.name}</h4>\n                {actor?.character && <p>Character: {actor.character} </p>}\n                {actor?.popularity && <p>Popularity: {actor.popularity}</p>}\n              </div>\n            </li>\n          ))}\n        </ul>\n      )}\n    </div>\n  );\n};\n\nexport default Cast;\n\nCast.propTypes = {\n  movieId: PropTypes.string,\n};\n"],"sourceRoot":""}